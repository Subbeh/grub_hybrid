insmod regexp
insmod part_msdos
insmod part_gpt
insmod fat
insmod ntfs
insmod ntfscomp
loadfont unicode
#set pager=1

echo "Switching to graphics mode. Press ESC to cancel."
if sleep --verbose --interruptible 3 ; then
    clear
    insmod all_video
    set gfxmode=auto
    set gfxpayload=keep
    set gfxterm_font=unicode
    terminal_output gfxterm
    set locale_dir=/boot/grub/locale/
    !set lang=fi
fi
clear

set menu_color_normal=black/green
set menu_color_highlight=light-green/green
export menu_color_normal
export menu_color_highlight
            
function addcomment {
    set offset=50
    set string="$1                                                                                                    "
    regexp --set substring "(.{$offset})" "${string}"
    output="${substring}$2"
    export output
}

# ------------------------------------------------------------------------------
# GParted 
# ------------------------------------------------------------------------------
function gpartedmenuentry {
    menuentry "GParted Live ($1, fi_FI)" "$2" "$3" {
        set isofile=$2
        set bootoptions="$3"
        echo "Using ${isofile}..."
        loopback loop $isofile
        echo "Loading kernel..."
        linux (loop)/live/vmlinuz findiso=${isofile} boot=live union=overlay username=user config components quiet noswap locales=fi_FI.UTF-8 keyboard-layouts=fi_FI $bootoptions
        echo "Loading initial ramdisk..."
        initrd (loop)/live/initrd.img
    }
}

for isofile in /iso/gparted-live-*.iso; do
    if [ ! -e "$isofile" ]; then break; fi
    regexp \
        --set 1:isoname \
        --set 2:version \
        --set 3:arch \
        "^/iso/(gparted-live-(.+)-([^-]+)\.iso)\$" "${isofile}"
    set title="GParted Live ${version}-${arch} ->"
    addcomment "$title" "# Osiointi, SMART-tiedot (GSmartControl)"
    submenu "${output}" "${isofile}" {
        set isofile=$2

        gpartedmenuentry "Default settings, i915.modeset=0" $isofile "i915.modeset=0 ip= net.ifnames=0  nosplash"
        gpartedmenuentry "Default settings" $isofile "ip= net.ifnames=0  nosplash"
        gpartedmenuentry "Default settings, KMS with large font & To RAM" $isofile "vga=791 toram=filesystem.squashfs ip= net.ifnames=0  nosplash live_console_font_size=16x32"
        gpartedmenuentry "Default settings, KMS" $isofile "vga=791 ip= net.ifnames=0  nosplash"
        gpartedmenuentry "To RAM, boot media can be removed later" $isofile "toram=filesystem.squashfs ip= net.ifnames=0  nosplash "
        gpartedmenuentry "Safe graphic settings (vga=normal)" $isofile "ip= net.ifnames=0 nomodeset vga=normal nosplash"
        gpartedmenuentry "Failsafe mode" $isofile "acpi=off irqpoll noapic noapm nodma nomce nolapic nosmp ip= net.ifnames=0 nomodeset vga=normal nosplash"

        if [ ${grub_platform} == "pc" ]; then
            menuentry "GParted Live (memdisk)" "${isofile}" {
                set isofile=$2
                echo "Loading ISO to memory..."
                linux16 /boot/memdisk iso
                initrd16 ${isofile}
            }
        fi
        if [ ${grub_platform} == "efi" ]; then
            menuentry "Local operating system (if available)" "${isofile}"  {
                set isofile=$2
                loopback loop $isofile
                echo "Booting first local disk..."
                # Generate boot menu automatically
                configfile (loop)/boot/grub/boot-local-efi.cfg
                # If not chainloaded, definitely no uEFI boot loader was found.
                echo "No uEFI boot loader was found!"
                sleep 15
            }
        fi
    }
done

# ------------------------------------------------------------------------------
# Clonezilla 
# ------------------------------------------------------------------------------
function clonezillamenuentry {
    menuentry "Clonezilla Live ($1)" "$2" "$3" {
        set isofile=$2
        set bootoptions="$3"
        echo "Using ${isofile}..."
        loopback loop $isofile
        echo "Loading kernel..."
        linux (loop)/live/vmlinuz boot=live findiso=${isofile} union=overlay username=user config components quiet noswap edd=on $bootoptions
        echo "Loading initial ramdisk..."
        initrd (loop)/live/initrd.img
    }
}

for isofile in /iso/clonezilla-live-*.iso; do
    if [ ! -e "$isofile" ]; then break; fi
    regexp \
        --set 1:isoname \
        --set 2:version \
        --set 3:arch \
        "^/iso/(clonezilla-live-(.+)-([^-]+)\.iso)\$" "${isofile}"
    set title="Clonezilla Live ${version}-${arch} ->"
    addcomment "$title" "# Kloonaus"
    submenu "${output}" "${isofile}" {
        set isofile=$2

        clonezillamenuentry "Default settings, VGA 800x600" $isofile "nomodeset enforcing=0 locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch="no" vga=788 ip= net.ifnames=0  splash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1"
        clonezillamenuentry "Default settings, KMS with large font & To RAM" $isofile "enforcing=0 locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch="no" vga=791 toram=live,syslinux,EFI,boot,.disk,utils ip= net.ifnames=0  splash live_console_font_size=16x32"
        clonezillamenuentry "Speech synthesis" $isofile "nomodeset enforcing=0 locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch="no" vga=788 ip= net.ifnames=0  splash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1 speakup.synth=soft ---"
        clonezillamenuentry "Default settings, VGA 1024x768" $isofile "nomodeset enforcing=0 locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch="no" vga=791 ip= net.ifnames=0  splash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1"
        clonezillamenuentry "Default settings, VGA 640x480" $isofile "nomodeset enforcing=0 locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch="no" vga=785 ip= net.ifnames=0  splash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1"
        clonezillamenuentry "Default settings, KMS" $isofile "enforcing=0 locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch="no" vga=791 ip= net.ifnames=0  splash"
        clonezillamenuentry "To RAM, boot media can be removed later" $isofile "nomodeset enforcing=0 locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch="no" vga=788 toram=live,syslinux,EFI,boot,.disk,utils ip= net.ifnames=0  splash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1"
        clonezillamenuentry "Safe graphic settings (vga=normal)" $isofile "nomodeset enforcing=0 locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch="no" ip= net.ifnames=0 nomodeset vga=normal nosplash"
        clonezillamenuentry "Failsafe mode" $isofile "nomodeset enforcing=0 locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch="no" acpi=off irqpoll noapic noapm nodma nomce nolapic nosmp ip= net.ifnames=0 nomodeset vga=normal nosplash"

        if [ ${grub_platform} == "pc" ]; then
            menuentry "Clonezilla Live (memdisk)" "${isofile}" {
                set isofile=$2
                echo "Loading ISO to memory..."
                linux16 /boot/memdisk iso
                initrd16 ${isofile}
            }
            menuentry "FreeDOS" "${isofile}" {
                set isofile=$2
                loopback loop $isofile
                linux16 (loop)/syslinux/memdisk
                initrd16 (loop)/live/freedos.img
            }
            menuentry "iPXE" "${isofile}" {
                set isofile=$2
                loopback loop $isofile
                linux16 (loop)/live/ipxe.lkn
            }
        fi
        if [ ${grub_platform} == "efi" ]; then
            menuentry "Local operating system (if available)" "${isofile}"  {
                set isofile=$2
                loopback loop $isofile
                echo "Booting first local disk..."
                # Generate boot menu automatically
                configfile (loop)/boot/grub/boot-local-efi.cfg
                # If not chainloaded, definitely no uEFI boot loader was found.
                echo "No uEFI boot loader was found!"
                sleep 15
            }
            menuentry "Network boot via iPXE" "${isofile}" {
                set isofile=$2
                loopback loop $isofile
                search --no-floppy --set=root -f (loop)/live/ipxe.efi
                chainloader (loop)/live/ipxe.efi + 1
            }
        fi

    }
done

# ------------------------------------------------------------------------------
# ShredOS
# ------------------------------------------------------------------------------
function shredosmenuentry {
    menuentry "ShredOS ($1)" "$2" "$3" {
        set imagefile=$2
        set nwipeoptions="$3"
        echo "Loading..."
        loopback loop $imagefile
        linux (loop,1)/boot/shredos console=tty3 loglevel=3 loadkeys=fi nwipe_options="${nwipeoptions}"
    }
}

for imagefile in /boot/shredos-*.img; do
    if [ ! -e "$imagefile" ]; then break; fi
    regexp \
        --set 1:imagename \
        --set 2:buildroot_version \
        --set 3:shredos_minor_version \
        --set 4:architecture \
        --set 5:nwipe_version \
        --set 6:date \
        "^/boot/(shredos-(.{7})\.([^_]+)_(.+)_(.+)_(.+)\.img)\$" "${imagefile}"
    set title="ShredOS ${buildroot_version}.${shredos_minor_version} ${architecture} nwipe ${nwipe_version} ->"
    addcomment "$title" "# Tyhjennys (nwipe my√∂s SystemRescuessa ja Grmlissa)"
    submenu "${output}" "${imagefile}" {
        set imagefile=$2
        shredosmenuentry "Default" $imagefile ""
        shredosmenuentry "Ignore USB devices, shutdown on completion" $imagefile "--nousb --autopoweroff"
        shredosmenuentry "Ignore USB devices, shutdown on completion, zero method, no verification, no blanking" $imagefile "--method=zero --verify=off --noblank --nousb --autopoweroff"
    }
done

# ------------------------------------------------------------------------------
# Grml
# ------------------------------------------------------------------------------
menuentry "Grml 2020.06 amd64 full" {
    set isofile=/iso/grml64-full_2020.06.iso
    echo "Using ${isofile}..."
    loopback loop $isofile
    set oldroot=$root
    set root=(loop)
    set iso_path=$isofile
    export iso_path
    configfile /boot/grub/loopback.cfg
    set root=$oldroot
    loopback --delete loop
    clear
}

# ------------------------------------------------------------------------------
# SystemRescue
# ------------------------------------------------------------------------------
function systemrescuemenuentry {
    menuentry "SystemRescue ($3)" "$2" "$1" {
        set isofile=$2
        set bootoptions="$3"
        probe -u $root --set=imgdevuuid
    	set imgdevpath="/dev/disk/by-uuid/$imgdevuuid"
        echo "Using ${isofile}..."
        loopback loop $isofile
        echo "Loading kernel..."
    	linux (loop)/sysresccd/boot/x86_64/vmlinuz archisobasedir=sysresccd img_dev=$imgdevpath img_loop=$isofile earlymodules=loop $bootoptions
        echo "Loading initial ramdisk..."
    	initrd (loop)/sysresccd/boot/intel_ucode.img (loop)/sysresccd/boot/amd_ucode.img (loop)/sysresccd/boot/x86_64/sysresccd.img
    }
}

for isofile in /iso/systemrescue-*.iso; do
    if [ ! -e "$isofile" ]; then break; fi
    regexp \
        --set 1:isoname \
        --set 2:version \
        --set 3:arch \
        "^/iso/(systemrescue-(.+)-([^-]+)\.iso)\$" "${isofile}"
    set title="SystemRescue ${version}-${arch} ->"
    addcomment "$title" "# Graafinen k√§ytt√∂liittym√§ (startx-komennolla)"
    submenu "${output}" "${isofile}" {
        set isofile=$2
        systemrescuemenuentry "" $isofile "Default options"
        systemrescuemenuentry "copytoram" $isofile "Copy system to RAM"
        systemrescuemenuentry "checksum" $isofile "Verify integrity of the medium"
        systemrescuemenuentry "nomodeset" $isofile "Basic display drivers"
        systemrescuemenuentry "findroot" $isofile "Boot a Linux operating system installed on the disk"
        systemrescuemenuentry "break" $isofile "Stop during the boot process before mounting the root filesystem"
        if [ ${grub_platform} == "pc" ]; then
            menuentry "SystemRescue (memdisk)" "${isofile}" {
                set isofile=$2
                echo "Loading ISO to memory..."
                linux16 /boot/memdisk iso
                initrd16 ${isofile}
            }
        fi
    }
done

# ------------------------------------------------------------------------------
# Super Grub2 Disk
# ------------------------------------------------------------------------------
for isofile in /iso/super_grub2_disk_*.iso; do
    if [ ! -e "$isofile" ]; then break; fi
    regexp \
        --set 1:isoname \
        --set 2:variant \
        --set 3:version \
        "^/iso/(super_grub2_disk_([^_]+)_([^_]+)\.iso)\$" "${isofile}"
    submenu "Super Grub2 Disk ${version} ${variant} ->" "${isofile}" {
        set isofile=$2
        menuentry "Super Grub2 Disk (loopback.cfg)" "${isofile}" {
            set isofile=$2
            echo "Using ${isofile}..."
            loopback loop $isofile
            set oldroot=$root
            set root=(loop)
            set iso_path=$isofile
            export iso_path
            configfile /boot/grub/loopback.cfg
            set root=$oldroot
            loopback --delete loop
        }
        if [ ${grub_platform} == "pc" ]; then
            menuentry "Super Grub2 Disk (memdisk)" "${isofile}" {
                set isofile=$2
                echo "Loading ISO to memory..."
                linux16 /boot/memdisk iso
                initrd16 ${isofile}
            }
        fi
    }
done

# ------------------------------------------------------------------------------
# Arch Linux Netboot
# ------------------------------------------------------------------------------
menuentry "Arch Linux Netboot (iPXE)" { 
    if [ ${grub_platform} == "pc" ]; then
        linux16 /boot/arch_netboot.lkrn
    else
        chainloader /boot/arch_netboot.efi
    fi
}

# ------------------------------------------------------------------------------
# iPXE
# ------------------------------------------------------------------------------
menuentry "iPXE 1.21.1" { 
    if [ ${grub_platform} == "pc" ]; then
        linux16 /boot/ipxe.lkrn
    else
        chainloader /boot/ipxe.efi
    fi
}

# ------------------------------------------------------------------------------
# netboot.xyz
# ------------------------------------------------------------------------------
addcomment "netboot.xyz ->" "# comment"
submenu "${output}" {

    if [ ${grub_platform} == "pc" ]; then

        menuentry "boot.netboot.xyz Legacy (PCBIOS) iPXE Bootloader" {
            linux16 /boot/netboot.xyz.lkrn
        }
        
        menuentry "Generic iPXE + initrd script (HTTP)" {
            linux16 /boot/ipxe.lkrn
            initrd16 /boot/netboot.xyz-initrd
        }

        menuentry "Generic iPXE + command line script (HTTP)" {
            linux16 /boot/ipxe.lkrn dhcp \&\& chain --autofree http://boot.netboot.xyz/ipxe/netboot.xyz.lkrn
        }

    else

        menuentry "boot.netboot.xyz DHCP boot image file, uses built-in iPXE NIC drivers" {
            chainloader /boot/netboot.xyz.efi
        }

        menuentry "boot.netboot.xyz EFI w/ Simple Network Protocol, attempts to boot all net devices" {
            chainloader /boot/netboot.xyz-snp.efi
        }

        menuentry "boot.netboot.xyz EFI w/ Simple Network Protocol, only boots from device chained from" {
            chainloader /boot/netboot.xyz-snponly.efi
        }
    
    fi

}

# ------------------------------------------------------------------------------
# Other
# ------------------------------------------------------------------------------
if [ ${grub_platform} == "pc" ]; then

    submenu "memtest86+ 5.01 ->" {
        menuentry "Memory test (memtest86+)" {
            linux16 /boot/memtest86+.bin
        }
        menuentry "Memory test (memtest86+, serial console 115200)" {
            linux16 /boot/memtest86+.bin console=ttyS0,115200n8
        }
        menuentry "Memory test (memtest86+, experimental multiboot)" {
            multiboot /boot/memtest86+_multiboot.bin
        }
        menuentry "Memory test (memtest86+, serial console 115200, experimental multiboot)" {
            multiboot /boot/memtest86+_multiboot.bin console=ttyS0,115200n8
        }
    }

fi

if [ ${grub_platform} == "efi" ]; then

    menuentry "UEFI setup" {
        fwsetup
    }

    submenu "From Super UEFIinSecureBoot Disk v3 ->" {

        menuentry "Memtest86" {
            chainloader "($root)/boot/suisbd/memtest86/BOOTX64.efi"
        }

        menuentry "Microsoft Windows Vista/7/8/8.1/10 UEFI/GPT" {
            search --no-floppy --file /EFI/Microsoft/Boot/bootmgfw.efi --set temproot
            chainloader "($temproot)/EFI/Microsoft/Boot/bootmgfw.efi"
        }

        submenu "EFI Tools" {
            for efifile in /boot/suisbd/*.efi; do
                if [ ! -e "$efifile" ]; then break; fi

                menuentry "$efifile" "$efifile" {
                    chainloader "($root)$1"
                }
            done
        }

        submenu "EFI Drivers" {
            for efifile in /boot/suisbd/drivers/*.efi; do
                if [ ! -e "$efifile" ]; then break; fi

                menuentry "$efifile" "$efifile" {
                    chainloader "($root)$1"
                }
            done
        }

    }
    
fi

menuentry "Reboot" {
	reboot
}

menuentry "Shutdown" {
	halt
}
